# Lexicon. Order does not matter.
define fs /[\t ]+/
define ws /\s+/
define nows /\S+/
define nl /[\r\n]+/
define nonl /[^\r\n]+/
define comment /[!#][^\r\n]*/
define number /\d+/
define word /\w+/
define name /\w[0-9a-zA-Z_-]*/
define hostname /\w[0-9a-zA-Z-]*/
define ipv4_ip /\d+\.\d+\.\d+\.\d+/
define ipv4_mask ipv4_ip
define ipv4_umask ipv4_ip
define ipv6_ip /(?:[a-fA-F0-9]*:){1,7}(?:\d+\.\d+\.\d+\.\d+|[a-fA-F0-9]+)?/
define ipvx_ip /[a-zA-Z0-9:\.]+[\.:][a-zA-Z0-9:\.]+/
define if_name /[a-zA-Z\-]+[A-Z0-9\/\.:]+/
define if_type /\S+/
define multi_line_str_start /\^?[Cc=#] ?[\r\n]/
define multi_line_str_end /\^?[Cc=#][\r\n]/
define as_number /[1-9]\d{0,4}/
define description /[^\r\n]+/
define file /\S+/
define acl_action /(?:permit|deny)/
define acl_direction /(?:ingress|egress)/
define acl_name name
define version_number /[0-9\.]+/
define async_line_name name

# Define grammar.
grammar default:
    match ws
        | comment:
        do.skip()
    match 'no' fs:
        out.enqueue_on_add(nl, 'disable')
        do.next()

grammar aaa_group_statements(default):
    match 'server' fs ipvx_ip nl:
        out.add('$0', '$2')
    do.return()

grammar aaa(default):
    match 'aaa' fs 'new-model' nl:
        out.add('aaa/$2')
    match 'aaa group server' fs nows fs nows nl:
        out.enter('aaa/group?type="$2"&name="$4"')
        aaa_group_statements()
    match 'aaa' fs nonl nl:
        out.add('aaa/option?string="$2"')
    do.return()

grammar acl_statements(default):
    match number fs 'remark' fs nonl nl:
        out.add('$2?seq="$0"&remark="$4"')
    match number fs acl_action fs nonl nl:
        out.add('$2?seq="$0"&condition="$4"')
    do.return()

grammar acl(default):
    match /ipv[46]/ fs 'access-list' fs name nl:
        out.enter('acl?name="$4"&protocol="$0"')
        acl_statements()
    do.return()

grammar as_path_set_statements(default):
    match 'ios-regex' fs /\'/ /[^']*/ /\'/ nl:
        out.add('as-path?regex="$0"')
    do.return()

grammar as_path_set(default):
    match 'as-path-set' fs nows nl:
        out.enter('$0?name="$2"')
        as_path_set_statements()
    match 'end-set' nl:
        do.skip()
    do.return()

grammar async_line_statements(default):
    match /access-(?:group|class)/ fs acl_direction fs acl_name nl:
        out.add('$0?name="$2"/direction', '$4')
    match 'authorization commands' fs nows nl:
        out.add('$0', '$2')
    match 'authorization exec' fs nows nl:
        out.add('$0', '$2')
    match 'exec-timeout' fs number fs number nl:
        out.add('$0/minutes', '$2')
        out.add('$0/seconds', '$4')
    match 'session-timeout' fs number fs /(?:in|out)put/ nl:
        out.add('$0/$4', '$2')
    match 'length' fs number nl:
        out.add('$0', '$2')
    match 'login authentication' fs nows nl:
        out.add('$0/$2', '$2')
    match 'password' fs number fs nows nl:
        out.add('$0?type="$2"', '$4')
    match 'timeout login response' fs number nl:
        out.add('$0', '$2')
    match 'transport' fs nows fs nows nl:
        out.add('$0/$2', '$4')
    do.return()

grammar async_line(default):
    match 'line' fs async_line_name nl:
        out.enter('async-line?name="$2"')
        async_line_statements()
    match 'line template' fs async_line_name nl:
        out.enter('async-line?name="$2"')
        async_line_statements()
    do.return()

grammar redistribute_statements:
    match ws:
        do.skip()
    match 'metric' fs number:
        out.add('$0', '$2')
    match 'route-policy' fs nows:
        out.add('$0', '$2')
    match nl:
        do.return()
    do.return()

grammar bfd_statements(default):
    match 'echo' fs 'disable' nl:
        out.add('echo/disable')
    do.return()

grammar bgp_af_statements(default):
    match 'as-override' nl:
        out.add('$0')
    match 'allocate-label' fs word nl:
        out.add('$0', '$2')
    match 'bgp dampening' fs 'route-policy' fs nows nl:
        out.add('dampening/$2', '$4')
    match 'default-originate' nl:
        out.add('$0')
    match 'maximum-paths' fs /[ei]bgp/ fs number nl:
        out.add('$0/$2', '$4')
    match 'maximum-prefix' fs number fs number nl:
        out.add('$0?max="$2"&threshold="$4"')
    match 'maximum-prefix' fs number fs number fs 'restart' fs number nl:
        out.add('$0?max="$2"&threshold="$4"/$6', '$8')
    match 'network' fs ipvx_ip '/' number nl:
        out.add('$0?address="$2"&prefixlen="$4"')
    match 'network' fs ipvx_ip '/' number fs nows nl:
        out.add('$0?address="$2"&prefixlen="$4"', '$6')
    match 'network' fs ipvx_ip '/' number fs 'route-policy' fs nows nl:
        out.add('$0?address="$2"&prefixlen="$4"/$6', '$8')
    match 'next-hop-self' nl:
        out.add('$0')
    match 'redistribute' fs /(?:connected|static|ospf \d+)/:
        out.enter('redistribute/source?name="$2"')
        redistribute_statements()
    match 'remove-private-AS' nl:
        out.add('$0')
    match 'route-policy' fs nows fs /(?:in|out)/ nl:
        out.add('$0?name="$2"&direction="$4"', '$4')
    match 'route-reflector-client' nl:
        out.add('$0')
    match 'send-community-ebgp' nl:
        out.add('$0')
    match 'send-extended-community-ebgp' nl:
        out.add('$0')
    match 'site-of-origin' fs nows nl:
        out.add('$0', '$2')
    match 'soft-reconfiguration' fs word nl:
        out.add('$0?direction="$2"')
    match 'soft-reconfiguration' fs word fs nows nl:
        out.add('$0?direction="$2"/$4')
    do.return()

grammar bgp_neighbor_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        bgp_af_statements()
    match 'capability suppress' fs nows nl:
        out.add('$0?capability="$2"')
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    match 'ebgp-multihop' fs number nl:
        out.add('$0', '$2')
    match 'password' fs 'encrypted' fs nows nl:
        out.add('$0?type="$2"', '$4')
    match 'remote-as' fs number nl:
        out.add('$0', '$2')
    match 'update-source' fs nows nl:
        out.add('$0', '$2')
    match 'use neighbor-group' fs nows nl:
        out.add('$0', '$2')
    match 'shutdown' nl:
        out.add('$0')
    match 'speaker-id' fs number nl:
        out.add('$0', '$2')
    do.return()

grammar bgp_vrf_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        bgp_af_statements()
    match 'label-allocation-mode' fs nows nl:
        out.add('$0', '$2')
    match 'rd' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar bgp_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        bgp_af_statements()
    match 'bgp' fs 'enforce-first-as' fs 'disable' nl:
        out.add('$2/$4')
    match 'bgp router-id' fs nows nl:
        out.add('router-id', '$2')
    match 'maximum-paths' fs number nl:
        out.add('$0', '$2')
    match 'neighbor' fs ipv4_ip nl:
        out.enter('$0?address="$2"')
        bgp_neighbor_statements()
    match 'neighbor' fs ipv6_ip nl:
        out.enter('$0?address="$2"')
        bgp_neighbor_statements()
    match 'neighbor-group' fs nows nl:
        out.enter('$0?name="$2"')
        bgp_neighbor_statements()
    match 'vrf' fs nows nl:
        out.enter('$0?name="$2"')
        bgp_vrf_statements()
    do.return()

grammar class_map_statements(default):
    match 'match' fs nonl nl:
        out.add('$0?condition="$2"')
    match 'end-class-map' nl:
        do.return()
    do.return()

grammar class_maps(default):
    match 'class-map' fs /match-(?:any|all)/ fs nonl nl:
        out.add('qos/$0?name="$4"/mode/$2')
        out.enter('qos/$0?name="$4"')
        class_map_statements()
    do.return()

grammar client_statements(default):
    match 'passive' nl:
        out.add('$0')
        do.return()
    match 'password' fs 'encrypted' fs nows nl:
        out.add('$0?type="$2"', '$4')
        do.return()
    match 'source-interface' fs nows nl:
        out.add('$0', '$2')
        do.return()
    match 'username' fs nows nl:
        out.add('$0', '$2')
        do.return()
    do.return()

grammar clients(default):
    match /(?:t?ftp|rcp) client/ fs:
        out.enter('$0')
        client_statements()
    do.return()

grammar clock(default):
    match 'clock' fs 'timezone' fs nonl nl:
        out.add('clock/timezone', '$4')
    match 'clock' fs 'summer-time' fs nonl nl:
        out.add('clock/summer-time', '$4')
    do.return()

grammar community_set_statements(default):
    match nows /,?/ nl:
        out.add('community?name="$0"')
    do.return()

grammar community_set(default):
    match 'community-set' fs nows nl:
        out.enter('$0?name="$2"')
        community_set_statements()
    match 'end-set' nl:
        do.skip()
    do.return()

grammar controller_path_statements(default):
    match 'ais-shut' nl:
        out.add('$0')
    match 'delay trigger' fs number nl:
        out.add('$0')
    match 'delay trigger line' fs number nl:
        out.add('$0')
    match 'report' fs name nl:
        out.add('$0?alarm="$2"')
    match 'scrambling' fs 'disable' nl:
        out.add('$0/$2')
    do.return()

grammar controller_au_tug_statements(default):
    match 'mode' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar controller_au_statements(default):
    match 'mode' fs nows nl:
        out.add('$0', '$2')
    match 'tug3' fs number nl:
        out.enter('$0?number="$2"')
        controller_au_tug_statements()
    match 'width' fs number nl:
        out.add('$0', '$2')
    do.return()

grammar controller_channel_group_statements(default):
    match 'speed' fs number nl:
        out.add('$0', '$2')
    match 'timeslots' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar controller_dsu_statements(default):
    match 'mode' fs nows nl:
        out.add('$0', '$2')
    match 'bandwidth' fs number nl:
        out.add('$0', '$2')
    do.return()

grammar controller_statements(default):
    match 'au' fs number nl:
        out.enter('$0?number="$2"')
        controller_au_statements()
    match 'channel-group' fs number nl:
        out.enter('$0?number="$2"')
        controller_channel_group_statements()
    match 'dsu' nl:
        out.enter('$0')
        controller_dsu_statements()
    match /(?:path|line)/ nl:
        out.enter('$0')
        controller_path_statements()
    match 'bert' fs /(?:interval|error|pattern)/ fs nows nl:
        out.add('$0/$2', '$4')
    match 'cablelength' fs number nl:
        out.add('$0', '$2')
    match 'clock source' fs word nl:
        out.add('$0', '$2')
    match 'description' fs description nl:
        out.add('description', '$2')
    match 'down-when-looped' nl:
        out.add('$0')
    match 'framing' fs nows nl:
        out.add('$0', '$2')
    match 'linecode' fs nows nl:
        out.add('$0', '$2')
    match 'loopback' fs nonl nl:
        out.add('$0', '$2')
    match 'lanmode' fs nows nl:
        out.add('$0', '$2')
    match 'mode' fs nows nl:
        out.add('$0', '$2')
    match 'national bits' fs /(?:en|dis)able/ nl:
        out.add('$0/$2')
    match 'overhead' fs nonl nl:
        out.add('$0', '$2')
    match 'rx-los-threshold' fs nows nl:
        out.add('$0')
    match 'shutdown' nl:
        out.add('disable')
    match 'threshold' fs nonl nl:
        out.add('disable')
    match 'transmit-power' fs nows nl:
        out.add('$0')
    match 'wavelength' fs nows nl:
        out.add('$0')
    controller_path_statements()
    do.return()

grammar controller(default):
    match 'controller' fs nonl nl:
        out.enter('controllers/$0?name="$2"')
        controller_statements()
    do.return()

grammar control_plane_management_plane_inband_interface_statements(default):
    match 'allow' fs nows nl:
        out.add('$0/protocol?name="$2"')
    do.return()

grammar control_plane_management_plane_inband_statements(default):
    match 'interface' fs nows nl:
        out.enter('$0?name="$2"')
        control_plane_management_plane_inband_interface_statements()
    do.return()

grammar control_plane_management_plane_statements(default):
    match 'inband' nl:
        out.enter('$0')
        control_plane_management_plane_inband_statements()
    do.return()

grammar control_plane_statements(default):
    match 'management-plane' nl:
        out.enter('$0')
        control_plane_management_plane_statements()
    do.return()

grammar dhcp_profile_statements(default):
    match 'helper-address' fs 'vrf' fs nows fs ipvx_ip nl:
        out.add('$0?vrf="$4"', '$6')
    do.return()

grammar dhcp_statements(default):
    match 'interface' fs if_name fs 'relay profile' fs nows nl:
        out.add('$0?name="$2"/relay-profile', '$6')
    match 'profile' fs nows fs 'relay' nl:
        out.enter('$0?name="$2"')
        dhcp_profile_statements()
    do.return()

grammar event(default):
    match 'event manager' fs 'environment' fs nonl nl:
        out.add('$0/$2', '$4')
    match 'event manager' fs 'directory' fs nonl nl:
        out.add('$0/$2', '$4')
    match 'event manager' fs 'policy' fs nows fs 'username' fs nows nl:
        out.add('$0/$2?name="$4"/$6', '$8')
    do.return()

grammar explicit_path_statements(default):
    match 'index'
       fs number
       fs 'exclude-address'
       fs 'ipv4 unicast'
       fs ipv4_ip nl:
        out.add('index?number="$2"/$4?protocol="ipv4"&address="$8"')
    do.return()

grammar flow_version_statements(default):
    match 'options' fs nonl nl:
        out.add('options/option?name="$2"')
    do.return()

grammar flow_statements(default):
    match 'record' fs 'ipv4' nl:
        out.add('$0/$2')
    match 'cache' fs 'entries' fs nows nl:
        out.add('$0/$2', '$4')
    match 'cache' fs 'timeout' fs /(?:active|inactive)/ fs number nl:
        out.add('$0/$2/$4', '$6')
    match 'destination' fs nows nl:
        out.add('$0', '$2')
    match 'exporter' fs nows nl:
        out.add('$0', '$2')
    match 'source' fs nows nl:
        out.add('$0', '$2')
    match 'transport' fs /(?:tcp|udp)/ fs number nl:
        out.add('$0?protocol="$2"&port="$4"', '$4')
    match 'version' fs nows nl:
        out.add('$0', '$2')
        out.enter('controllers/$0?name="$2"')
        flow_version_statements()
    do.return()

grammar flow(default):
    match 'flow' fs /(?:monitor|exporter)-map/ fs name nl:
        out.enter('$0/$2?name="$4"')
        flow_statements()
    do.return()

grammar hw_module(default):
    match 'hw-module' fs 'subslot' fs nows fs 'cardtype' fs nows nl:
        out.add('$0?$2="$4"/$6', '$8')
    match 'hw-module' fs 'subslot' fs nows fs 'shutdown powered' nl:
        out.add('$0?$2="$4"/$6')
    match 'hw-module' fs 'subslot' fs nows fs 'shutdown unpowered' nl:
        out.add('$0?$2="$4"/$6')
    match 'hw-module' fs 'qos' fs 'multicast' fs 'location' fs nonl nl:
        out.add('$0/$2/$4/$6?name="$8"')
    match 'hw-module' fs 'qos' fs 'multicast' fs 'priorityq' fs 'disable' fs 'location' fs nonl nl:
        out.add('$0/$2/$4/$10?name="$12"/$6/$8')
    match 'hw-module' fs 'service offline' fs 'location' fs nonl nl:
        out.add('$0/$2/$4?name="$6"')
    do.return()

grammar interface_l2transport_statements(default):
    match 'service-policy' fs /(?:in|out)put/ fs nows nl:
        out.add('$0?name="$4"&direction="$2"', '$4')
    do.return()

grammar interface_pos_statements(default):
    match 'crc' fs number nl:
        out.add('$0', '$2')
    match 'framing' fs nonl nl:
        out.add('$0', '$2')
    match 'scramble' nl:
        out.add('$0', '$0')
    do.return()

grammar interface_pvc_statements(default):
    match 'service-policy' fs /(?:in|out)put/ fs nows nl:
        out.add('$0?name="$4"&direction="$2"', '$4')
    match 'encap' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar interface_serial_statements(default):
    match 'crc' fs number nl:
        out.add('$0', '$2')
    match 'invert' nl:
        out.add('$0')
    match 'scramble' nl:
        out.add('$0')
    do.return()

grammar interface_statements(default):
    match 'bandwidth' fs number nl:
        out.add('$0', '$2')
    match 'bundle' fs 'id' fs number fs 'mode' fs nows nl:
        out.add('$0?id="$4"/$6', '$8')
    match 'bundle' fs 'minimum-active links' fs number nl:
        out.add('$0/$2', '$4')
    match 'carrier-delay' fs 'up' fs number fs 'down' fs number nl:
        out.add('$0?up="$4"&down="$8"', '$8')
    match 'cdp' nl:
        out.add('$0')
    match 'dampening' nl:
        out.add('$0')
    match 'description' fs description nl:
        out.add('description', '$2')
    match 'destination' fs ipvx_ip nl:
        out.add('$0', '$2')
    match 'down-when-looped' nl:
        out.add('$0')
    match 'dot1q' fs 'vlan' fs number nl:
        out.add('$0?vlan="$4"')
    match 'dot1q' fs 'vlan' fs number fs number nl:
        out.add('$0?vlan="$4"&vlan2="$6"')
    match 'duplex' fs word nl:
        out.add('$0', '$2')
    match 'encapsulation' fs nonl nl:
        out.add('$0', '$2')
    match 'flow-control' fs nonl nl:
        out.add('$0', '$2')
    match 'flow' fs 'ipv4' fs 'monitor' fs name fs 'sampler' fs name fs nows nl:
        out.add('$0?protocol="$2"/$4', '$6')
        out.add('$0?protocol="$2"/$8', '$10')
        out.add('$0?protocol="$2"/direction', '$12')
    match 'frame-relay' fs /(?:lmi|intf)-type/ fs nows nl:
        out.add('$0/$2', '$4')
    match 'ipv4 address' fs ipv4_ip fs ipv4_mask nl:
        out.add('$0?address="$2"&mask="$4"')
    match 'ipv4 address' fs ipv4_ip fs ipv4_mask fs 'secondary' nl:
        out.add('$0?address="$2"&mask="$4"/$6')
    match 'ipv4 helper-address' fs 'vrf' fs nows fs ipv4_ip nl:
        out.add('$0?address="$6"&vrf="$4"')
    match /ipv[46]/ fs 'access-group' fs nows fs nows nl:
        out.add('$0/$2?name="$4"&direction="$6"')
    match /ipv[46]/ fs 'access-group' fs nows fs nows fs nows nl:
        out.add('$0/$2?name="$4"&direction="$6"/$8')
    match /ipv[46]/ fs 'unnumbered' fs nows nl:
        out.add('ip-address?$2="$4"')
    match /ipv[46]/ fs 'unreachables' fs 'disable' nl:
        out.add('$2/$4')
    match /ipv[46]/ fs 'verify unicast source' fs 'reachable-via' fs nows nl:
        out.add('$0/$2?$4="$6"')
    match 'ipv6' fs 'nd' fs 'suppress-ra' nl:
        out.add('ipv6/$2/$4')
    match 'ipv6' fs 'address' fs ipv6_ip '/' number nl:
        out.add('ipv6/$2?address="$4"&prefixlen="$6"')
    match 'ipv6' fs 'enable' nl:
        out.add('$0/$2')
    match 'keepalive' fs number nl:
        out.add('$0', '$2')
    match 'l2transport' nl:
        out.enter('$0')
        interface_l2transport_statements()
    match 'load-interval' fs number nl:
        out.add('$0', '$2')
    match 'loopback' fs nonl nl:
        out.add('$0', '$2')
    match 'mac-address' fs nows nl:
        out.add('$0', '$2')
    match 'mac-accounting' fs nows nl:
        out.add('$0?direction="$2"')
    match 'mtu' fs number nl
        | 'ipv4 mtu' fs number nl:
        out.add('$0', '$2')
    match 'negotiation' fs nonl nl:
        out.add('$0', '$2')
    match 'path-option' fs nonl nl:
        out.add('$0?option="$2"')
    match 'ppp authentication chap' fs nows nl:
        out.add('ppp/chap/$2')
    match 'ppp loopback ignore' nl:
        out.add('ppp/loopback-ignore')
    match 'ppp chap' fs 'hostname' fs nows nl:
        out.add('ppp/chap/$2', '$4')
    match 'ppp chap' fs 'password' fs 'encrypted' fs nows nl:
        out.add('ppp/chap/$2?type="$4"', '$6')
    match 'pos' nl:
        out.enter('$0')
        interface_pos_statements()
    match 'proxy-arp' nl:
        out.add('$0')
    match 'pvc' fs number nl:
        out.enter('$0?number="$2"')
        interface_pvc_statements()
    match 'serial' nl:
        out.enter('$0')
        interface_serial_statements()
    match 'service-policy' fs /(?:in|out)put/ fs nows nl:
        out.add('$0?name="$4"&direction="$2"')
    match 'service-policy' fs /(?:in|out)put/ fs nows fs 'account' fs nows nl:
        out.add('$0?name="$4"&direction="$2"/$6')
    match 'shutdown' nl:
        out.add('disable')
    match 'signalled-name' fs nows nl:
        out.add('$0', '$2')
    match 'speed' fs number nl:
        out.add('$0', '$2')
    match 'vrf' fs name nl:
        out.add('$0', '$2')
    do.return()

grammar interface(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        interface_statements()
    match 'interface' fs if_name fs nows nl:
        out.enter('$0?name="$2"')
        out.add('type', '$4')
        interface_statements()
    match 'interface preconfigure' fs if_name nl:
        out.enter('$0?name="$2"')
        interface_statements()
    match 'interface preconfigure' fs if_name fs nows nl:
        out.enter('$0?name="$2"')
        out.add('type', '$4')
        interface_statements()
    do.return()

grammar l2vpn_bridge_group_bridge_domain_mac_aging_statements(default):
    match 'time' fs number nl:
        out.add('$0', '$2')
    do.return()

grammar l2vpn_bridge_group_bridge_domain_mac_limit_statements(default):
    match 'action' fs nows nl:
        out.add('$0', '$2')
    match 'maximum' fs number nl:
        out.add('$0', '$2')
    match 'notification' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar l2vpn_bridge_group_bridge_domain_mac_statements(default):
    match 'aging' nl:
        out.enter('$0')
        l2vpn_bridge_group_bridge_domain_mac_aging_statements()
    match 'limit' nl:
        out.enter('$0')
        l2vpn_bridge_group_bridge_domain_mac_limit_statements()
    match 'withdraw disable' nl:
        out.add('widthdraw/disable')
    do.return()

grammar l2vpn_bridge_group_bridge_domain_vfi_neighbor_statements(default):
    match 'pw-class' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar l2vpn_bridge_group_bridge_domain_vfi_statements(default):
    match 'neighbor' fs ipvx_ip fs 'pw-id' fs number nl:
        out.enter('$0?address="$2"')
        out.add('pw-id', '$6')
        l2vpn_bridge_group_bridge_domain_vfi_neighbor_statements()
    match 'limit' nl:
        out.enter('$0')
        l2vpn_bridge_group_bridge_domain_mac_limit_statements()
    do.return()

grammar l2vpn_bridge_group_bridge_domain_statements(default):
    match 'mac' nl:
        out.enter('$0')
        l2vpn_bridge_group_bridge_domain_mac_statements()
    match 'mtu' fs number nl:
        out.add('$0', '$2')
    match 'interface' fs if_name nl:
        out.add('$0?name="$2"')
    match 'vfi' fs number nl:
        out.enter('$0?name="$2"')
        l2vpn_bridge_group_bridge_domain_vfi_statements()
    do.return()

grammar l2vpn_bridge_group_statements(default):
    match 'bridge-domain' fs nows nl:
        out.enter('$0?name="$2"')
        l2vpn_bridge_group_bridge_domain_statements()
    do.return()

grammar l2vpn_pwclass_encap_statements(default):
    match 'control-word' nl:
        out.add('$0')
    match 'protocol' fs nows nl:
        out.add('$0', '$2')
    match 'transport-mode' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar l2vpn_pwclass_statements(default):
    match 'encapsulation' fs nows nl:
        out.enter('$0?name="$2"')
        l2vpn_pwclass_encap_statements()
    do.return()

grammar l2vpn_xconnect_group_p2p_neighbor_statements(default):
    match 'pw-class' fs nows nl:
        out.add('$0', '$2')
    match 'control-word' fs 'disable' nl:
        out.add('$0/$2')
    match 'transport-mode' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar l2vpn_xconnect_group_p2p_statements(default):
    match 'interface' fs nows nl:
        out.add('$0', '$2')
    match 'neighbor' fs ipv4_ip fs 'pw-id' fs nows nl:
        out.enter('$0?address="$2"')
        out.add('pw-id', '$6')
        l2vpn_xconnect_group_p2p_neighbor_statements()
    do.return()

grammar l2vpn_xconnect_group_statements(default):
    match 'p2p' fs nows nl:
        out.enter('$0?name="$2"')
        l2vpn_xconnect_group_p2p_statements()
    do.return()

grammar l2vpn_statements(default):
    match 'bridge group' fs nows nl:
        out.enter('$0?name="$2"')
        l2vpn_bridge_group_statements()
    match 'pw-class' fs nows nl:
        out.enter('$0?name="$2"')
        l2vpn_pwclass_statements()
    match 'xconnect group' fs nows nl:
        out.enter('$0?name="$2"')
        l2vpn_xconnect_group_statements()
    logging()
    do.return()

grammar l2vpn(default):
    match 'l2vpn' nl:
        out.enter('$0')
        l2vpn_statements()
    do.return()

grammar logging_statements(default):
    match 'archive-size' fs number nl:
        out.add('$0', '$2')
    match 'archive-length' fs number nl:
        out.add('$0', '$2')
    match 'file-size' fs number nl:
        out.add('$0', '$2')
    match 'device' fs name nl:
        out.add('$0?name="$2"', '$2')
    match 'frequency' fs nows nl:
        out.add('$0', '$2')
    match 'severity debugging' nl:
        out.add('$0')
    match 'pseudowire' nl:
        out.add('$0')
    do.return()

grammar logging(default):
    match 'logging' nl:
        out.enter('logging')
        logging_statements()
    match 'logging archive' nl:
        out.enter('logging/option?string="archive"')
        logging_statements()
    match 'logging' fs nonl nl:
        out.add('logging/option?string="$2"')
    do.return()

grammar sampler_map_statements(default):
    match 'random' fs nonl nl:
        out.add('$0', '$2')
    do.return()

grammar sampler_map(default):
    match 'sampler-map' fs name nl:
        out.enter('$0?name="$2"')
        sampler_map_statements()
    do.return()

grammar service_commands(default):
    match 'service' fs nonl nl:
        out.add('$0/$2')
    do.return()

grammar snmp_statements(default):
    match 'chassis-id' fs nows nl:
        out.add('$0', '$2')
    match 'community' fs nows fs nonl nl:
        out.add('community?name="$2"', '$4')
    match 'enable traps' fs nonl nl:
        out.add('$0?trap="$2"')
    match 'engineID local' fs nows nl:
        out.add('engine-id', '$2')
    match 'group' fs nows fs /v2|v3/ fs nonl nl:
        out.add('group?name="$2"/version', '$4')
        out.add('group?name="$2"/options', '$6')
    match 'host' fs nows fs 'traps' fs nows nl:
        out.add('$0?address="$2"/trap?name="$6"')
    match 'host' fs nows fs 'traps version' fs nonl / */ nl:
        out.add('$0?address="$2"/version', '$6')
    match 'ifindex persist' nl:
        out.add('$0')
    match 'ifmib stats cache' nl:
        out.add('$0')
    match 'ipv4 precedence' fs nows nl:
        out.add('$0', '$2')
    match 'location' fs nonl nl:
        out.add('$0', '$2')
    match 'queue-length' fs number nl:
        out.add('$0', '$2')
    match 'timeouts' fs nows fs number nl:
        out.add('$0/$2', '$4')
    match 'trap link' fs nonl nl:
        out.add('$0', '$2')
    match 'traps' fs nonl nl:
        out.add('enable-traps?name="$2"')
    match 'trap-source' fs nonl nl:
        out.add('$0', '$2')
    match 'user' fs nows fs nows fs nows fs 'auth' fs nows fs 'encrypted' fs nonl nl:
        out.add('user?name="$2"/group', '$4')
        out.add('user?name="$2"/version', '$6')
        out.add('user?name="$2"/authentication', '$10')
        out.add('user?name="$2"/password', '$14')
    match 'view' fs nows fs nows fs nonl nl:
        out.add('view?name="$2"/allow?name="$4"', '$6')
    do.return()

grammar snmp(default):
    match 'snmp-server' fs:
        out.enter('snmp')
        snmp_statements()
    do.return()

grammar taskgroup_statements(default):
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    match 'task' fs /read|write|execute|debug/ fs nonl nl:
        out.add('$2?action="$4"')
    do.return()

grammar taskgroup(default):
    match 'taskgroup' fs name nl:
        out.enter('$0?name="$2"')
        taskgroup_statements()
    do.return()

grammar usergroup_statements(default):
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    match 'taskgroup' fs name nl:
        out.add('$0?name="$2"')
    do.return()

grammar usergroup(default):
    match 'usergroup' fs name nl:
        out.enter('$0?name="$2"')
        usergroup_statements()
    do.return()

grammar username_statements(default):
    match 'group' fs name nl:
        out.add('$0?name="$2"')
    match 'password' fs number fs nows nl:
        out.add('$0?type="$2"', '$4')
    match 'secret' fs number fs nows nl:
        out.add('$0?type="$2"', '$4')
    do.return()

grammar username(default):
    match 'username' fs name nl:
        out.enter('user?name="$2"')
        username_statements()
    do.return()

grammar ntp_interface_statements(default):
    match 'broadcast' nl:
        out.add('$0')
    match 'broadcast' fs 'version' fs number nl:
        out.add('$0/$2', '$4')
    do.return()

grammar ntp_statements(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        ntp_interface_statements()
    match 'max-associations' fs number nl:
        out.add('$0', '$2')
    match 'server' fs ipvx_ip nl:
        out.add('$0?address="$2"')
    match 'server' fs ipv4_ip fs 'source' fs nows nl:
        out.add('$0?address="$2"/$4', '$6')
    match 'source' fs nows nl:
        out.add('$0', '$2')
    match 'update-calendar' nl:
        out.add('$0')
    do.return()

grammar ntp(default):
    match 'ntp' nl:
        out.enter('ntp')
        ntp_statements()
    do.return()

grammar policy_map_class_police_statements(default):
    match /[a-z]+-action/ fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar policy_map_class_statements(default):
    match 'bandwidth' fs nonl nl:
        out.add('$0', '$2')
    match 'end-policy-map' nl:
        do.skip()
    match 'police' fs 'rate' fs nonl nl:
        out.enter('$0?rate="$4"')
        policy_map_class_police_statements()
    match 'priority' / */ nl:
        out.add('$0')
    match 'priority' fs 'level' fs number / */ nl:
        out.enter('$0?level="$4"')
    match 'random-detect' fs 'precedence' fs number fs nonl nl:
        out.add('$0?$2="$4"', '$6')
    match 'random-detect' fs nonl nl:
        out.add('$0', '$2')
    match 'service-policy' fs nows nl:
        out.add('$0?name="$2"')
    match 'set discard-class' fs name nl:
        out.add('$0', '$2')
    match 'set mpls experimental' fs 'imposition' fs number nl:
        out.add('$0?$2="$4"')
    match 'set precedence' fs name nl:
        out.add('$0', '$2')
    match 'set cos' fs number nl:
        out.add('$0', '$2')
    match 'set qos-group' fs name nl:
        out.add('$0', '$2')
    match 'shape' fs 'average' fs 'percent' fs number nl:
        out.add('$0/$2/$4', '$6')
    match 'shape' fs 'average' fs 'percent' fs number fs nl:
        out.add('$0/$2/$4', '$6')
    match 'shape' fs 'average' fs number fs /[gkm]?bps/ nl:
        out.add('$0/$2/$6', '$4')
    match 'shape' fs 'average' fs number fs /[gkm]?bps/ fs nl:
        out.add('$0/$2/$6', '$4')
    match 'queue-limit' fs number fs /(?:packets|bytes)/ nl:
        out.add('$0?unit="$4"', '$2')
    match 'queue-limit' fs number fs /(?:packets|bytes)/ fs nl:
        out.add('$0?unit="$4"', '$2')
    do.return()

grammar policy_map_statements(default):
    match 'class' fs nonl nl:
        out.enter('$0?name="$2"')
        policy_map_class_statements()
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    do.return()

grammar policy_maps(default):
    match 'policy-map' fs nonl nl:
        out.enter('qos/$0?name="$2"')
        policy_map_statements()
    do.return()

grammar prefix_set_statements(default):
    match ipv6_ip '/' number /,?/ nl:
        out.add('entry?prefix="$0/$2"')
    match ipv6_ip '/' number fs /[lg]e/ fs number /,?/ nl:
        out.add('entry?prefix="$0/$2"&$4="$6"')
    match ipv6_ip '/' number fs /[lg]e/ fs number fs /[lg]e/ fs number /,?/ nl:
        out.add('entry?prefix="$0/$2"&$4="$6"&$8="$10"')
    match ipv4_ip '/' number /,?/ nl:
        out.add('entry?prefix="$0/$2"')
    match ipv4_ip '/' number fs /[lg]e/ fs number /,?/ nl:
        out.add('entry?prefix="$0/$2"&$4="$6"')
    match ipv4_ip '/' number fs /[lg]e/ fs number fs /[lg]e/ fs number /,?/ nl:
        out.add('entry?prefix="$0/$2"&$4="$6"&$8="$10"')
    do.return()

grammar prefix_set(default):
    match 'prefix-set' fs nows nl:
        out.enter('$0?name="$2"')
        prefix_set_statements()
    match 'end-set' nl:
        do.skip()
    do.return()

grammar router_static_af_route_statements:
    match ws:
        do.skip()
    match 'bfd fast-detect' fs nonl nl:
        out.add('$0', '$2')
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    match 'tag' fs number:
        out.add('$0', '$2')
    match number fs:
        out.add('metric', '$0')
    match number nl:
        out.add('metric', '$0')
    match nl:
        do.return()
    do.return()

grammar router_static_af_statements(default):
    match ipv4_ip '/' number fs 'vrf' fs nows fs ipv4_ip:
        out.enter('static-route?ip="$0"&pfxlen="$2"&vrf="$6"/destination?ip="$8"')
        router_static_af_route_statements()
    match ipv4_ip '/' number fs 'vrf' fs nows fs nows fs ipv4_ip:
        out.enter('static-route?ip="$0"&pfxlen="$2"&vrf="$6"/destination?interface="$8"&ip="$10"')
        router_static_af_route_statements()
    match ipv4_ip '/' number fs 'vrf' fs nows fs nows:
        out.enter('static-route?ip="$0"&pfxlen="$2"&vrf="$6"/destination?interface="$8"')
        router_static_af_route_statements()
    match ipv4_ip '/' number fs ipv4_ip:
        out.enter('static-route?ip="$0"&pfxlen="$2"/destination?ip="$4"')
        router_static_af_route_statements()
    match ipvx_ip '/' number fs nows fs ipvx_ip:
        out.enter('static-route?ip="$0"&pfxlen="$2"/destination?interface="$4"&ip="$6"')
        router_static_af_route_statements()
    match ipvx_ip '/' number fs nows:
        out.enter('static-route?ip="$0"&pfxlen="$2"/destination?interface="$4"')
        router_static_af_route_statements()
    do.return()

grammar router_static_vrf_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        router_static_af_statements()
    do.return()

grammar router_static_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        router_static_af_statements()
    match 'vrf' fs nows nl:
        out.enter('$0?name="$2"')
        router_static_vrf_statements()
    do.return()

grammar route_policy_statements(default):
    match 'end-policy' nl:
        do.return()
    match nonl nl:
        do.skip()
    do.return()

grammar route_policy(default):
    match 'route-policy' fs nows nl:
        out.enter('$0?name="$2"')
        route_policy_statements()
    do.return()

grammar switch_fabric_statements(default):
    match 'service-policy' fs nows nl:
        out.add('$0?name="$2"')
    do.return()

grammar switch_fabric(default):
    match 'switch-fabric' nl:
        out.enter('switch-fabric')
        switch_fabric_statements()
    do.return()

grammar hsrp_interface_group_statements(default):
    match 'authentication' fs nows nl:
        out.add('$0', '$2')
    match 'ipv4' fs nows nl:
        out.add('$0', '$2')
    match 'preempt' nl:
        out.add('$0')
    match 'priority' fs number nl:
        out.add('$0', '$2')
    do.return()

grammar hsrp_interface_statements(default):
    match 'hsrp' fs number fs:
        out.enter('hsrp-group?name="$2"')
        hsrp_interface_group_statements()
    do.return()

grammar hsrp_statements(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        hsrp_interface_statements()
    do.return()

grammar isis_interface_af_statements(default):
    match 'metric' fs nows nl:
        out.add('$0', '$2')
    match 'metric' fs nows fs 'level' fs number nl:
        out.add('$0?level="$6"', '$2')
    match 'mpls ldp sync' fs 'level' fs number nl:
        out.add('$0?$2="$4"')
    do.return()

grammar isis_interface_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('address-family?name="$2"')
        isis_interface_af_statements()
    match 'circuit-type' fs /level-[12\-]-?\w*/ nl:
        out.add('$0', '$2')
    match 'hello-padding' fs 'disable' nl:
        out.add('$0/$2')
    match 'hello-password' fs 'hmac-md5 encrypted' fs nows nl:
        out.add('$0?type="$2"', '$4')
    match 'lsp-interval' fs number nl:
        out.add('$0', '$2')
    match 'mpls ldp' fs 'sync' nl:
        out.add('$0/$2')
    match 'passive' nl:
        out.add('$0')
    match 'point-to-point' nl:
        out.add('$0')
    do.return()

grammar isis_af_statements(default):
    match 'adjacency-check' fs 'disable' nl:
        out.add('$0/$2')
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        isis_interface_statements()
    match 'maximum-paths' fs number nl:
        out.add('$0', '$2')
    match 'metric-style' fs nonl nl:
        out.add('$0', '$2')
    match 'metric' fs number fs 'level' fs nows nl:
        out.add('$0?$4="$6"', '$2')
    match 'mpls traffic-eng' fs 'router-id' fs nows nl:
        out.add('$0/$2', '$4')
    match 'mpls traffic-eng' fs /level-[12]-only|multicast-intact/ nl:
        out.add('$0/$2')
    match /(?:prc|spf|lsp-gen)-interval/ fs 'maximum-wait' fs number fs 'initial-wait' fs number fs 'secondary-wait' fs number nl:
        out.add('$0/maximum-wait', '$4')
        out.add('$0/initial-wait', '$8')
        out.add('$0/secondary-wait', '$12')
    match 'summary-prefix' fs ipv4_ip '/' number nl:
        out.add('$0?address="$2"&pfxlen="$4"')
    match 'summary-prefix' fs ipv4_ip '/' number fs 'level' fs number nl:
        out.add('$0?address="$2"&pfxlen="$4"/level', '$8')
    match 'propagate' fs /level \d+/ fs 'into' fs /level \d+/ fs /distribute-list|route-policy/ fs name nl:
        out.add('propagate?source="$2"&destination="$6"/$8', '$10')
    match 'redistribute' fs /connected|static|ospf \d+/ fs nows fs:
        out.enter('redistribute/source?name="$2"&destination="$4"')
        redistribute_statements()
    match 'spf-interval' fs nonl nl:
        out.add('$0?option="$2"')
    do.return()

grammar isis_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        isis_af_statements()
    match 'ignore-attached-bit' nl:
        out.add('$0')
    match 'ignore-lsp-errors' fs 'disable' nl:
        out.add('$0/$2')
    match 'is-type' ws nows nl:
        out.add('$0')
    match 'log adjacency changes' nl:
        out.add('$0')
    match /lsp-\w+-/ 'interval' fs number nl:
        out.add('$0/interval', '$2')
    match /lsp-\w+-interval/ fs nonl nl:
        out.add('$0/option', '$2')
    match 'lsp-password' fs nonl nl:
        out.add('$0', '$2')
    match 'max-lsp-lifetime' fs number nl:
        out.add('$0', '$2')
    match 'net' fs nonl nl:
        out.add('$0', '$2')
    match 'nsf' fs nows nl:
        out.add('$0', '$2')
    match 'set-overload-bit' nl:
        out.add('$0')
    match 'set-overload-bit' fs nonl nl:
        out.add('$0?option="$2"')
    do.return()

grammar ospf_af_statements(default):
    do.return()

grammar ospf_area_interface_statements(default):
    match 'cost' fs number nl:
        out.add('$0', '$2')
    match 'network' fs 'broadcast' nl:
        out.add('$0/$2')
    match 'passive' fs /(?:en|dis)able/ nl:
        out.add('$0/$2')
    do.return()

grammar ospf_area_statements(default):
    match 'cost' fs number nl:
        out.add('$0', '$2')
    match 'interface' fs nows nl:
        out.enter('$0?name="$2"')
        ospf_area_interface_statements()
    match 'passive' fs /(?:en|dis)able/ nl:
        out.add('$0/$2')
    do.return()

grammar ospf_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        ospf_af_statements()
    match 'area' fs number nl:
        out.enter('$0?number="$2"')
        ospf_area_statements()
    match 'cost' fs number nl:
        out.add('$0')
    match 'log adjacency changes' nl:
        out.add('$0')
    match 'router-id' fs nows nl:
        out.add('$0', '$2')
    match 'passive' fs 'enable' nl:
        out.add('$0')
    match 'passive' fs 'disable' nl:
        out.add('$0/$2')
    match 'default-information originate' fs 'always' fs 'metric-type' fs nows nl:
        out.add('$0/$2')
        out.add('$0/$4', '$6')
    do.return()

grammar rsvp_interface_statements(default):
    match 'bandwidth' fs number nl:
        out.add('$0/average', '$2')
    match 'bandwidth' fs number fs number nl:
        out.add('$0/average', '$2')
        out.add('$0/burst', '$4')
    match 'signalling' fs 'dscp' fs number nl:
        out.add('$0/$2', '$4')
    do.return()

grammar rsvp_statements(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        rsvp_interface_statements()
    match 'signalling' fs 'graceful-restart' nl:
        out.add('$0/$2')
    do.return()

grammar tacacs_server_statements(default):
    match 'key' fs number fs nows nl:
        out.add('key?type="$2"', '$4')
    do.return()

grammar mpls_traffic_eng_interface_statements(default):
    match 'backup-path' fs 'tunnel-te' fs nows nl:
        out.add('$0/$2?name="$4"')
    do.return()

grammar mpls_traffic_eng_statements(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        mpls_traffic_eng_interface_statements()
    do.return()

grammar mpls_ldp_interface_statements(default):
    do.return()

grammar mpls_ldp_label_advertise_statements(default):
    match 'disable' nl:
        out.add('$0')
    match 'for' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar mpls_ldp_label_statements(default):
    match 'advertise' nl:
        out.enter('$0')
        mpls_ldp_label_advertise_statements()
    do.return()

grammar mpls_ldp_log_statements(default):
    match 'neighbor' nl:
        out.add('$0')
    do.return()

grammar mpls_ldp_statements(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        mpls_ldp_interface_statements()
    match 'label' nl:
        out.enter('label')
        mpls_ldp_label_statements()
    match 'log' nl:
        out.enter('log')
        mpls_ldp_log_statements()
    match 'graceful-restart' nl:
        out.add('$0')
    match 'holdtime' fs number nl:
        out.add('$0', '$2')
    match 'neighbor' fs ipvx_ip fs 'targeted' nl:
        out.add('$0?address="$2"/$4')
    match 'neighbor' fs ipvx_ip fs 'password' fs 'encrypted' fs nows nl:
        out.add('$0?address="$2"/password?type="$6"', '$8')
    match 'router-id' fs nows nl:
        out.add('$0', '$2')
    match 'session protection' nl:
        out.add('$0')
    do.return()

grammar router_pim_af_statements(default):
    match 'rp-address' fs ipv4_ip fs name fs 'override' nl:
        out.add('$0?acl="$4"&override="1"')
    match 'accept-register' fs nows nl:
        out.add('$0', '$2')
    do.return()

grammar router_pim_statements(default):
    match 'address-family' fs nows nl:
        out.enter('address-family?name="$2"')
        router_pim_af_statements()
    do.return()

grammar multicast_routing_interface_statements(default):
    match 'enable' nl:
        out.add('$0')
    do.return()

grammar multicast_routing_af_statements(default):
    match 'accounting' fs 'per-prefix' nl:
        out.add('$0/$2')
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        multicast_routing_interface_statements()
    match 'rate-per-route' nl:
        out.add('$0')
    match 'ssm range' fs name nl:
        out.add('$0', '$2')
    do.return()

grammar multicast_routing_statements(default):
    match 'address-family' fs nows nl:
        out.enter('$0?name="$2"')
        multicast_routing_af_statements()
    do.return()

grammar vrrp_interface_vrrp_statements(default):
    match 'ipv4' fs ipv4_ip nl:
        out.add('$0?address="$2"', '$2')
        do.return()
    match 'ipv4' fs ipv4_ip fs 'secondary' nl:
        out.add('$0?address="$2"/$4')
        do.return()
    match 'priority' fs number nl:
        out.add('$0', '$2')
        do.return()
    match 'preempt delay' fs number nl:
        out.add('$0', '$2')
        do.return()
    match 'text-authentication' fs nows nl:
        out.add('$0', '$2')
        do.return()
    do.return()

grammar vrrp_interface_statements(default):
    match 'vrrp' fs name fs:
        out.enter('$0?name="$2"')
        vrrp_interface_vrrp_statements()
    do.return()

grammar msdp_peer_statements(default):
    match 'connect-source' fs nows nl:
        out.add('$0', '$2')
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    match 'mesh-group' fs name nl:
        out.add('$0', '$2')
    do.return()

grammar msdp_statements(default):
    match 'originator-id' fs name nl:
        out.add('$0', '$2')
    match 'peer' fs ipv4_ip nl:
        out.enter('$0?address="$2"')
        msdp_peer_statements()
    do.return()

grammar vrrp_statements(default):
    match 'interface' fs if_name nl:
        out.enter('$0?name="$2"')
        vrrp_interface_statements()
    match 'ssm range' fs name nl:
        out.add('$0', '$2')
    do.return()

grammar protocols(default):
    match 'router bgp' fs number nl:
        out.enter('bgp?as="$2"')
        bgp_statements()
    match 'router static' nl:
        out.enter('static')
        router_static_statements()
    match 'router hsrp' nl:
        out.enter('hsrp')
        hsrp_statements()
    match 'router isis' fs name nl:
        out.enter('isis?name="$2"')
        isis_statements()
    match 'router msdp' nl:
        out.enter('msdp')
        msdp_statements()
    match 'router ospf' fs name nl:
        out.enter('ospf?name="$2"')
        ospf_statements()
    match 'router vrrp' nl:
        out.enter('vrrp')
        vrrp_statements()
    match 'rsvp' nl:
        out.enter('$0')
        rsvp_statements()
    match 'mpls' fs 'ip-ttl-propagate' fs 'disable' nl:
        out.add('$0/$2')
    match 'mpls' fs 'ip-ttl-propagate' fs 'disable' fs 'forwarded' nl:
        out.add('$0/$2?which="$4"')
    match 'mpls traffic-eng' nl:
        out.enter('$0')
        mpls_traffic_eng_statements()
    match 'mpls ldp' nl:
        out.enter('$0')
        mpls_ldp_statements()
    match 'mpls oam' nl:
        out.add('$0')
    match 'router pim' nl:
        out.enter('$0')
        router_pim_statements()
    match 'router pim' fs 'address-family' fs nows nl:
        out.enter('$0')
        out.enter('address-family?name="$4"')
        router_pim_af_statements()
    match 'router pim' fs 'vrf' fs name fs 'address-family' fs nows nl:
        out.enter('$0?vrf="$4"')
        out.enter('address-family?name="$8"')
        router_pim_af_statements()
    match 'multicast-routing' fs 'address-family' fs nows nl:
        out.enter('$0/address-family?name="$4"')
        multicast_routing_af_statements()
    match 'multicast-routing' nl:
        out.enter('$0')
        multicast_routing_statements()
    do.return()

grammar vrf_af_import_statements(default):
    match ipv4_ip ':' number nl:
        out.add('target?address="$0:$2"')
    do.return()

grammar vrf_af_statements(default):
    match /(?:im|ex)port route-policy/ fs nows nl:
        out.add('$0', '$2')
    match /(?:im|ex)port route-target/ nl:
        out.enter('$0')
        vrf_af_import_statements()
    match 'maximum prefix' fs nonl nl:
        out.add('$0', '$2')
    do.return()

grammar vrf_statements(default):
    match 'address-family' fs nonl nl:
        out.enter('$0?name="$2"')
        vrf_af_statements()
    match 'description' fs nonl nl:
        out.add('$0', '$2')
    do.return()

grammar vrf(default):
    match 'vrf' fs nonl nl:
        out.enter('vrf-list/vrf?name="$2"')
        vrf_statements()
    do.return()

grammar banner_statements:
    match multi_line_str_end:
        do.return()
    match nl:
        out.add('.', '$0')
    match nonl nl:
        out.add('.', '$0$1')
    do.return()

grammar telnet_vrf_server_statements:
    match fs 'max-servers' fs nows:
        out.add('$1', '$3')
    match fs 'access-list' fs nows:
        out.add('$1', '$3')
    when nl:
        do.return()

grammar telnet_vrf_statements:
    match 'server':
        out.enter('$0')
        telnet_vrf_server_statements()
    match nl:
        do.return()

grammar input(default):
    match 'Building configuration...' nl
        | /Current configuration : \d+ bytes/ nl
        | /.* (?:UTC|MET) ?/ nl:
        do.skip()
    match 'alias' fs name fs nonl nl:
        out.add('aliases/alias?name="$2"', '$4')
    match 'bfd' nl:
        out.add('$0')
        bfd_statements()
    match 'cdp' nl:
        out.add('$0')
    match 'control-plane' nl:
        out.enter('$0')
        control_plane_statements()
    match 'banner' fs word fs multi_line_str_start:
        out.enter('banner/$2')
        banner_statements()
    match 'dhcp' fs 'ipv4' nl:
        out.enter('dhcp?protocol="$2"')
        dhcp_statements()
    match 'domain lookup' fs nows nl:
        out.add('domain-lookup', '$2')
    match 'domain name-server' fs nonl nl:
        out.add('name-server/server?address="$2"')
    match 'domain name' fs nonl nl:
        out.add('domain', '$2')
    match 'domain list' fs nonl nl:
        out.add('domain-list/domain?name="$2"')
    match 'exception' fs nonl nl:
        out.add('exception?type="$2"')
    match 'explicit-path' fs 'name' fs name nl:
        out.enter('$0?name="$2"')
        explicit_path_statements()
    match 'hostname' fs hostname nl:
        out.add('hostname', '$2')
    match 'ipv4 virtual address' fs ipv4_ip fs ipv4_mask nl:
        out.add('$0?address="$2"&mask="$4"')
    match 'rp mgmtethernet forwarding' nl:
        out.add('$0')
    match 'mpls label range table' fs nonl nl:
        out.add('$0', '$2')
    match 'ssh client' fs 'source-interface' fs nows nl:
        out.add('$0/$2', '$4')
    match 'ssh server' fs nows nl:
        out.add('$0?version="$2"')
    match 'tacacs-server' fs 'timeout' fs number nl:
        out.add('$0/timeout', '$2')
    match 'tacacs-server' fs 'host' fs nows fs 'port' fs number nl:
        out.enter('$0/host?name="$4"&port="$8"')
        tacacs_server_statements()
    match 'tacacs-server' fs 'key' fs number fs nonl nl:
        out.enter('$0/key?type="$4"&string="$6"')
        tacacs_server_statements()
    match 'tacacs' fs 'source-interface' fs nows nl:
        out.add('$0/$2', '$4')
    match 'tcp' fs nonl nl:
        out.add('$0?option="$2"')
    match 'telnet ipv4 client' fs 'source-interface' fs nows nl:
        out.add('$0/$2', '$4')
    match 'telnet vrf' fs name fs /ipv[46]/ fs:
        out.enter('telnet/vrf?name="$2"&protocol="$4"')
        telnet_vrf_statements()
    match 'track' fs ipvx_ip nl:
        out.add('$0?address="$2"')
    match 'vty-pool' fs nonl nl:
        out.add('$0?option="$2"')
    acl()
    aaa()
    as_path_set()
    async_line()
    class_maps()
    clients()
    clock()
    community_set()
    controller()
    event()
    flow()
    hw_module()
    interface()
    l2vpn()
    logging()
    ntp()
    policy_maps()
    prefix_set()
    protocols()
    route_policy()
    sampler_map()
    service_commands()
    snmp()
    switch_fabric()
    taskgroup()
    usergroup()
    username()
    vrf()
    match 'end' nl:
        do.next()
