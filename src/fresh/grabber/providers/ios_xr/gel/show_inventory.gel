define ws      /[\t ]+/
define nows    /\S+/
define nonl               /[^\r\n]+/
define fs      /[\t ]*,[\t ]*/
define chassis /[^"]*Chassis/
define fan     /[^"]*Fan[^"]*/
define card    /[^"]+\/(?:\*|CPU[0-9]+|SP)/
define port    /[^"]+\/[A-Z0-9]+\/[A-Z0-9*]+(?:\/\d+)+/
define power   /PEM\d+|[-a-zA-Z0-9_ \t]+Power[-a-zA-Z0-9_ \t]+/
define spa     /\d+\/\d+\/\d+/
define field1  /[^"]*/
define field2  /\S+/
define field3  /(\S+|[^,]*?)/
define nl      /[ \t]*\r?\n/

grammar element:
    match 'DESCR:' ws '"' field1 '"' nl:
        out.add('description', '$3')
    match 'PID:' fs:
        do.skip()
    match 'PID:' ws field3 fs:
        out.add('pid', '$2')
    match 'VID:' ws field2 fs:
        out.add('hardware-version', '$2')
    match 'SN:' ws nl:
        out.add('serialno', 'N/A')
    match 'SN:' ws field2 nl:
        out.add('serialno', '$2')
    match nl:
        do.return()

grammar input:
    match 'NAME:' ws '"' card  '"' fs:
        out.enter('element?name="$3"&type="CARD"')
        element()
    match 'NAME:' ws '"' chassis  '"' fs:
        out.enter('element?name="$3"&type="CHASSIS"')
        element()
    match 'NAME:' ws '"' power '"' fs:
        out.enter('element?name="$3"&type="POWER"')
        element()
    match 'NAME:' ws '"' fan '"' fs:
        out.enter('element?name="$3"&type="FAN"')
        element()
    match 'NAME:' ws '"' spa '"' fs:
        out.enter('element?name="$3"&type="SPA"')
        element()
    match 'NAME:' ws '"' port '"' fs:
        out.enter('element?name="$3"&type="PORT"')
        element()
    match 'NAME:' ws '""' fs 'DESCR:' ws '""' nl:
        trash()
    match nl:
        do.skip()

grammar trash:
    when 'NAME:':
        do.return()
    match nonl nl:
        do.skip()
    match nl:
        do.skip()
